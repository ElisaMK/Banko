using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Banko1 {
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window {
        internal List<int> talList = new List<int>();
        internal ObservableCollection<int> puljeList = new ObservableCollection<int>();
        internal ObservableCollection<int> jackpotList = new ObservableCollection<int>();

        public MainWindow() {
            InitializeComponent();

            TalListeGenerator();

            TalTilHvid();

            puljeListBox.ItemsSource = puljeList;
            jackpotListBox.ItemsSource = jackpotList;
        }

        internal void NyTal_Click(object sender, RoutedEventArgs e) {
            NytTal();
        }

        private void banko_Click(object sender, RoutedEventArgs e) {
            puljeList.Add(Convert.ToInt32(talLabel.Content));
        }

        private void nytSpil_Click(object sender, RoutedEventArgs e) {
            jackpotList.Add(Convert.ToInt32(talLabel.Content));

            //Code to Restart WPF Application
            //Start New Application Before Closing Current
            Process.Start(Application.ResourceAssembly.Location);

            //Close the Current
            Application.Current.Shutdown();

        }

        internal void NytTal() {
            Random rnd = new Random();

            int Value = rnd.Next(1, talList.Count);
            talLabel.Content = talList[Value];


            foreach (UIElement ele in leftWithNumbers.Children) {
                Label midlertidigLabel = null;
                if (ele.GetType() == typeof(Label)) {
                    Label lablesITaltabel = (Label)ele;

                    if (Convert.ToInt32(lablesITaltabel.Content) == talList[Value]) {
                        midlertidigLabel = lablesITaltabel;
                        midlertidigLabel.Foreground = Brushes.Black;
                    }
                }
            }
            talList.RemoveAt(Value);
        }

        internal void TalListeGenerator() {
            for (int i = 0; i < 91; i++) {
                talList.Add(i);
            }
        }

        internal void TalTilHvid() {
            foreach (UIElement ele in leftWithNumbers.Children) {
                if (ele.GetType() == typeof(Label)) {
                    Label lbl = (Label)ele;
                    lbl.Foreground = Brushes.White;
                    lbl.BorderThickness = new Thickness(1);
                    lbl.BorderBrush = Brushes.LightGray;
                }
            }
        }


    }
}
